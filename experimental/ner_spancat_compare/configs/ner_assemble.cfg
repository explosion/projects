[paths]
train = null
dev = null
vectors = "en_core_web_lg"
init_tok2vec = null
ner_DNA = null
ner_RNA = null
ner_cell_line = null
ner_cell_type = null
ner_protein = null
spans_key = "sc"

[system]
gpu_allocator = null
seed = 0

# We organized the pipeline as follows: first we source the NER component from
# each individual NER model we've trained per label (since we have five labels)
# all in all, we'll source five. Then, after each NER component, we use a custom
# component that transfers the entities from doc.ents into doc.spans[spans_key]
[nlp]
lang = "en"
pipeline = ["ner-dna","transfer-dna", "ner-rna","transfer-rna", "ner-cell-line","transfer-cell-line", "ner-cell-type","transfer-cell-type", "ner-protein","transfer-protein"]
batch_size = 128
disabled = []
before_creation = null
after_creation = null
after_pipeline_creation = null
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}

[components]

# First, we source the NER components from each of our models.
# We trained one model per entity, so we need to source from five models.
[components.ner-dna]
source = ${paths.ner_DNA}
component = "ner"

[components.ner-rna]
source = ${paths.ner_RNA}
component = "ner"

[components.ner-cell-line]
source = ${paths.ner_cell_line}
component = "ner"

[components.ner-cell-type]
source = ${paths.ner_cell_type}
component = "ner"

[components.ner-protein]
source = ${paths.ner_protein}
component = "ner"

# Then, we instantiate a component from our `transfer-ent` factory so that
# we can move the entities in doc.ents into doc.spans.
[components.transfer-dna]
factory = "transfer-ent.v1"
span_key = ${paths.spans_key}

[components.transfer-rna]
factory = "transfer-ent.v1"
span_key = ${paths.spans_key}

[components.transfer-cell-line]
factory = "transfer-ent.v1"
span_key = ${paths.spans_key}

[components.transfer-cell-type]
factory = "transfer-ent.v1"
span_key = ${paths.spans_key}

[components.transfer-protein]
factory = "transfer-ent.v1"
span_key = ${paths.spans_key}


[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 500
gold_preproc = false
limit = 0
augmenter = null

[training]
accumulate_gradient = 3
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
patience = 1600
max_epochs = 0
max_steps = 20000
eval_frequency = 200
frozen_components = []
before_to_disk = null
annotating_components = []

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar = true

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = 20000
initial_rate = 0.00005

[training.score_weights]
ents_f = 1
ents_p = 0.0
ents_r = 0.0
ents_per_type = null

[pretraining]

[initialize]
vectors = ${paths.vectors}
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
lookups = null
before_init = null
after_init = null

[initialize.components]

[initialize.tokenizer]