title: "Comparing SpanCat and NER using a corpus of biomedical literature (GENIA)"
description: |
  This project demonstrates how spaCy's Span Categorization (SpanCat) and
  Named-Entity Recognition (NER) perform on different types of entities. Here, we used
  a dataset of biomedical literature containing both overlapping and non-overlapping spans.

  ### About the dataset

  [GENIA](http://www.geniaproject.org/genia-corpus) is a dataset containing
  biomedical literature from 1,999 Medline abstracts. It contains a collection
  of overlapping and hierarhical spans.  To make parsing easier, we will be
  using the [pre-constructed IOB
  tags](https://github.com/thecharm/boundary-aware-nested-ner/blob/master/Our_boundary-aware_model/data/genia)
  from the Boundary Aware Nested NER paper repository.

  ### Experiments

  Given what we know from the dataset, we will create the following pipelines:

  | Pipeline | Description                                                                                                                             | Workflow Name |
  |----------|-----------------------------------------------------------------------------------------------------------------------------------------|---------------|
  | SpanCat  | Pure Span Categorization for all types of entities. Serves as illustration to demonstrate suggester functions and as comparison to NER. | `spancat` |
  | NER      | Named-Entity Recognition for all types of entities. Serves as illustration to compare with the pure SpanCat implementation       | `ner`         |

vars:
  name: "ner_spancat_compare"
  version: "1.0.0"
  gpu_id: -1
  # Labels
  dna: "DNA"
  rna: "RNA"
  cell_line: "cell_line"
  cell_type: "cell_type"
  protein: "protein"

directories:
  - "assets"
  - "configs"
  - "corpus"
  - "corpus/ner"
  - "metrics"
  - "scripts"
  - "training"

workflows:
  all:
    - "install"
    - "convert"
    - "create-ner"
    - "train-ner"
    - "train-spancat"
    - "evaluate-ner"
    - "evaluate-spancat"
  spancat:
    - "install"
    - "convert"
    - "train-spancat"
    - "evaluate-spancat"
  ner: 
    - "install"
    - "convert"
    - "create-ner"
    - "train-ner"
    - "evaluate-ner"

assets:
  - dest: "assets/train.iob2"
    description: "The training dataset for GENIA in IOB format."
    url: https://github.com/thecharm/boundary-aware-nested-ner/blob/master/Our_boundary-aware_model/data/genia/genia.train.iob2
  - dest: "assets/dev.iob2"
    description: "The evaluation dataset for GENIA in IOB format."
    url: https://github.com/thecharm/boundary-aware-nested-ner/blob/master/Our_boundary-aware_model/data/genia/genia.dev.iob2
  - dest: "assets/test.iob2"
    description: "The test dataset for GENIA in IOB format."
    url: https://github.com/thecharm/boundary-aware-nested-ner/blob/master/Our_boundary-aware_model/data/genia/genia.test.iob2

commands:
  - name: "install"
    help: "Install dependencies"
    script:
      - "pip3 install --user -r requirements.txt"
      - "python3 -m spacy download en_core_web_lg"
  - name: "convert"
    help: "Convert IOB file into the spaCy format"
    script:
      - "python3 -m scripts.convert assets/train.iob2 -o corpus/train.spacy"
      - "python3 -m scripts.convert assets/dev.iob2 -o corpus/dev.spacy"
      - "python3 -m scripts.convert assets/test.iob2 -o corpus/test.spacy"
    deps:
      - "assets/train.iob2"
      - "assets/dev.iob2"
      - "assets/test.iob2"
    outputs:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "corpus/test.spacy"

  - name: "create-ner"
    help: "Split corpus into separate NER datasets for each GENIA label"
    script:
      - >-
        python3 -m scripts.create_ner
        --train corpus/train.spacy
        --dev corpus/dev.spacy
        --test corpus/test.spacy
        --output-dir corpus/ner
    deps:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "corpus/test.spacy"
    outputs:
      - "corpus/ner/train_${vars.dna}.spacy"
      - "corpus/ner/train_${vars.rna}.spacy"
      - "corpus/ner/train_${vars.cell_line}.spacy"
      - "corpus/ner/train_${vars.cell_type}.spacy"
      - "corpus/ner/train_${vars.protein}.spacy"
      - "corpus/ner/dev_${vars.dna}.spacy"
      - "corpus/ner/dev_${vars.rna}.spacy"
      - "corpus/ner/dev_${vars.cell_line}.spacy"
      - "corpus/ner/dev_${vars.cell_type}.spacy"
      - "corpus/ner/dev_${vars.protein}.spacy"
      - "corpus/ner/test_${vars.dna}.spacy"
      - "corpus/ner/test_${vars.rna}.spacy"
      - "corpus/ner/test_${vars.cell_line}.spacy"
      - "corpus/ner/test_${vars.cell_type}.spacy"
      - "corpus/ner/test_${vars.protein}.spacy"

  - name: "train-ner"
    help: "Train an NER model for each label"
    script:
      - >-
        python3 -m spacy train
        configs/ner.cfg
        --output training/ner/${vars.dna}
        --paths.train corpus/ner/train_${vars.dna}.spacy
        --paths.dev corpus/ner/dev_${vars.dna}.spacy
        --gpu-id ${vars.gpu_id}
      - >-
        python3 -m spacy train
        configs/ner.cfg
        --output training/ner/${vars.rna}
        --paths.train corpus/ner/train_${vars.rna}.spacy
        --paths.dev corpus/ner/dev_${vars.rna}.spacy
        --gpu-id ${vars.gpu_id}
      - >-
        python3 -m spacy train
        configs/ner.cfg
        --output training/ner/${vars.cell_line}
        --paths.train corpus/ner/train_${vars.cell_line}.spacy
        --paths.dev corpus/ner/dev_${vars.cell_line}.spacy
        --gpu-id ${vars.gpu_id}
      - >-
        python3 -m spacy train
        configs/ner.cfg
        --output training/ner/${vars.cell_type}
        --paths.train corpus/ner/train_${vars.cell_type}.spacy
        --paths.dev corpus/ner/dev_${vars.cell_type}.spacy
        --gpu-id ${vars.gpu_id}
      - >-
        python3 -m spacy train
        configs/ner.cfg
        --output training/ner/${vars.protein}
        --paths.train corpus/ner/train_${vars.protein}.spacy
        --paths.dev corpus/ner/dev_${vars.protein}.spacy
        --gpu-id ${vars.gpu_id}
    deps:
      - "corpus/ner/train_${vars.dna}.spacy"
      - "corpus/ner/train_${vars.rna}.spacy"
      - "corpus/ner/train_${vars.cell_line}.spacy"
      - "corpus/ner/train_${vars.cell_type}.spacy"
      - "corpus/ner/train_${vars.protein}.spacy"
      - "corpus/ner/dev_${vars.dna}.spacy"
      - "corpus/ner/dev_${vars.rna}.spacy"
      - "corpus/ner/dev_${vars.cell_line}.spacy"
      - "corpus/ner/dev_${vars.cell_type}.spacy"
      - "corpus/ner/dev_${vars.protein}.spacy"
    outputs:
      - "training/ner/${vars.dna}/model-best"
      - "training/ner/${vars.rna}/model-best"
      - "training/ner/${vars.cell_line}/model-best"
      - "training/ner/${vars.cell_type}/model-best"
      - "training/ner/${vars.protein}/model-best"

  - name: "train-spancat"
    help: "Train a SpanCat model"
    script:
      - >-
        python3 -m spacy train
        configs/spancat.cfg
        --output training/spancat/
        --paths.train corpus/train.spacy
        --paths.dev corpus/dev.spacy
        --gpu-id ${vars.gpu_id}
    deps:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
      - "corpus/test.spacy"
    outputs:
      - "training/spancat/model-best"

  - name: "evaluate-ner"
    help: "Evaluate all NER models"
    script:
      - "mkdir -p metrics/ner"
      - >-
        python3 -m spacy evaluate
        training/ner/${vars.dna}/model-best
        corpus/ner/test_${vars.dna}.spacy
        --output metrics/ner/scores_${vars.dna}.json
      - >-
        python3 -m spacy evaluate
        training/ner/${vars.rna}/model-best
        corpus/ner/test_${vars.rna}.spacy
        --output metrics/ner/scores_${vars.rna}.json
      - >-
        python3 -m spacy evaluate
        training/ner/${vars.cell_line}/model-best
        corpus/ner/test_${vars.cell_line}.spacy
        --output metrics/ner/scores_${vars.cell_line}.json
      - >-
        python3 -m spacy evaluate
        training/ner/${vars.cell_type}/model-best
        corpus/ner/test_${vars.cell_type}.spacy
        --output metrics/ner/scores_${vars.cell_type}.json
      - >-
        python3 -m spacy evaluate
        training/ner/${vars.protein}/model-best
        corpus/ner/test_${vars.protein}.spacy
        --output metrics/ner/scores_${vars.protein}.json
    deps:
      - "training/ner/${vars.dna}/model-best"
      - "training/ner/${vars.rna}/model-best"
      - "training/ner/${vars.cell_line}/model-best"
      - "training/ner/${vars.cell_type}/model-best"
      - "training/ner/${vars.protein}/model-best"
      - "corpus/ner/test_${vars.dna}.spacy"
      - "corpus/ner/test_${vars.rna}.spacy"
      - "corpus/ner/test_${vars.cell_line}.spacy"
      - "corpus/ner/test_${vars.cell_type}.spacy"
      - "corpus/ner/test_${vars.protein}.spacy"
    outputs:
      - "metrics/ner/scores_${vars.dna}.json"
      - "metrics/ner/scores_${vars.rna}.json"
      - "metrics/ner/scores_${vars.cell_line}.json"
      - "metrics/ner/scores_${vars.cell_type}.json"
      - "metrics/ner/scores_${vars.protein}.json"

  - name: "evaluate-spancat"
    help: "Evaluate SpanCat model"
    script:
      - "mkdir -p metrics/spancat"
      - >-
        python3 -m spacy evaluate
        training/spancat/model-best
        corpus/test.spacy
        --output metrics/spancat/scores.json
    deps:
      - "training/spancat/model-best"
      - "corpus/test.spacy"
    outputs:
      - "metrics/spancat/scores.json"
