title: 'Project for speed benchmarking of various pretrained models of different NLP libraries.'
description: "This project runs various models on unannotated text, to measure the average speed in words per second (WPS). Note that a fair comparison should also take into account the type of annotations produced by each model, and the accuracy scores of the various pretrained NLP tasks. This example project only addresses the speed issue, but can be extended to perform more detailed comparisons on any data."
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "speed_benchmark"
  txt_dir: "texts"
  result_dir: "results"
  spacy_trf_name: "en_core_web_trf"
  stanza_name: "en_ewt"
  hf_trf_name: "roberta-base"
  flair_cpu_name: "pos-fast_ner-fast"
  flair_gpu_name: "pos_ner"
  ud_pipe_name: "english-ewt-ud-2.5-191206.udpipe"
  n_texts: 10000

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["scripts", "texts", "results"]

# Assets that should be downloaded or available in the directory. We're shipping
# some of them with the project, so they won't have to be downloaded. But the
# 'project assets' command still lets you verify that the checksums match.

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  setup:
    - install
    - download
  benchmark:
    - timing_cpu
    - timing_gpu

assets:
  - 
    dest: "texts/reddit-100k.jsonl"
    url: "https://github.com/explosion/projects/releases/download/reddit/reddit-100k.jsonl"
    description: "The texts to process"

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: install
    help: "Install dependencies"
    script:
      - "python -m pip install -r requirements.txt -f https://download.pytorch.org/whl/torch_stable.html"
    deps:
      - "requirements.txt"

  - name: download
    help: "Download models"
    script:
      - "python -m spacy download en_core_web_sm"
      - "python -m spacy download en_core_web_lg"
      - "python -m spacy download ${vars.spacy_trf_name}"
      - "python ./scripts/download_models.py ${vars.stanza_name} ${vars.flair_cpu_name},${vars.flair_gpu_name}"
      - "curl -O https://lindat.mff.cuni.cz/repository/xmlui/bitstream/handle/11234/1-3131/${vars.ud_pipe_name}"

  - name: timing_cpu
    help: "Run all timing benchmarks on CPU and add the numbers to output/results.csv"
    script:
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} spacy en_core_web_sm False --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} spacy en_core_web_lg False --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} spacy ${vars.spacy_trf_name} False --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} stanza ${vars.stanza_name} False --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} flair ${vars.flair_cpu_name} False --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} ud_pipe ${vars.ud_pipe_name} False --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} hf_trf ${vars.hf_trf_name} False --n-texts ${vars.n_texts}"

  - name: timing_gpu
    help: "Run all timing benchmarks on GPU and add the numbers to output/results.csv"
    script:
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} spacy en_core_web_sm True --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} spacy en_core_web_lg True --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} spacy ${vars.spacy_trf_name} True --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} stanza ${vars.stanza_name} True --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} flair ${vars.flair_gpu_name} True --n-texts ${vars.n_texts}"
      - "python ./scripts/run_nlp.py ${vars.txt_dir} ${vars.result_dir} hf_trf ${vars.hf_trf_name} True --n-texts ${vars.n_texts}"

  - name: clean
    help: "Remove output file(s)"
    script:
      - "rm -rf results/*"
