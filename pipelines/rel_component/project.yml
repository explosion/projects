title: "Example project of creating a novel nlp component to do relation extraction from scratch."
description: "This example project shows how to define a custom model and wrap it as a spaCy component so it integrates easily in any `nlp` pipeline."

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  i: 342

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["scripts", "assets", "data"]

# Assets that should be downloaded or available in the directory. You can replace
# this with your own input data.

workflows:
  all:
    - data
    - train

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "install"
    help: "Install dependencies"
    script:
      - "pip install -r requirements.txt"
    deps:
      - "requirements.txt"

  - name: "data"
    help: "Create some sample gold-standard annotations."
    script:
      - "python ./scripts/create_data.py data/train.spacy"
    outputs:
      - "data/train.spacy/"

  - name: "train"
    help: "Run training - note that the small sample data will cause the model to overfit."
    script:
    # TODO spacy train script
      - "python ./scripts/run_pipeline.py data/train.spacy"
    deps:
      - "data/train.spacy/"

  - name: clean
    help: "Remove intermediate files"
    script:
      - "rm -rf data/train.spacy"
