title: "Demo spancat in a new pipeline (Span Categorization)"
description: "A minimal demo spancat project for spaCy v3"

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "spancat_demo"
  lang: "en"
  train: "train.json"
  dev: "dev.json"
  version: "0.0.0"
  # Set a random seed
  seed: 0
  # Set your GPU ID, -1 is CPU
  gpu_id: -1
  # Vectors model for train-with-vectors
  vectors_model: "en_core_web_md"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "corpus", "configs", "training", "scripts", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded.
assets:
  - dest: "assets/train.json"
    description: "Demo training data adapted from the `ner_demo` project"
  - dest: "assets/dev.json"
    description: "Demo development data"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - convert
    - create-config
    - train
    - evaluate
  all-vectors:
    - download
    - convert
    - create-config
    - train-with-vectors
    - evaluate

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "download"
    help: "Download a spaCy model with pretrained vectors"
    script:
      - "python -m spacy download ${vars.vectors_model}"

  - name: "convert"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python scripts/convert.py ${vars.lang} assets/${vars.train} corpus/train.spacy"
      - "python scripts/convert.py ${vars.lang} assets/${vars.dev} corpus/dev.spacy"
    deps:
      - "assets/${vars.train}"
      - "assets/${vars.dev}"
      - "scripts/convert.py"
    outputs:
      - "corpus/train.spacy"
      - "corpus/dev.spacy"

  - name: "create-config"
    help: "Create a new config with a spancat pipeline component"
    script:
      - "python -m spacy init config --lang ${vars.lang} --pipeline spancat configs/config.cfg --force"
    outputs:
      - "configs/config.cfg"

  - name: "train"
    help: "Train the spancat model"
    script:
      - >-
        python -m spacy train configs/config.cfg --output training/ 
        --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy 
        --training.eval_frequency 10 
        --training.patience 100 
        --gpu-id ${vars.gpu_id}
        --system.seed ${vars.seed}
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model-best"

  - name: "train-with-vectors"
    help: "Train the spancat model with vectors"
    script:
      - >-
        python -m spacy train configs/config.cfg --output training/ 
        --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy 
        --training.eval_frequency 10 
        --training.patience 100 
        --gpu-id ${vars.gpu_id} 
        --initialize.vectors ${vars.vectors_model} 
        --system.seed ${vars.seed}
        --components.tok2vec.model.embed.include_static_vectors true
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/dev.spacy --output training/metrics.json"
    deps:
      - "corpus/dev.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  - name: package
    help: "Package the trained model as a pip package"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/${vars.lang}_${vars.name}-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"

  - name: clean
    help: "Remove intermediary directories"
    script:
      - "rm -rf corpus/*"
      - "rm -rf training/*"
      - "rm -rf metrics/*"
